plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'com.github.johnrengelman.shadow' version '5.1.0' apply false
}
allprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'

    group = 'me.mattstudios'
    version = '1.0.0'

    repositories {
        mavenCentral()
        mavenLocal()

        maven {
            name = 'spigotmc-repo'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
    }

    dependencies {
        // Spigot
        compileOnly "org.spigotmc:spigot-api:+"

        // Matt stuff
        implementation "me.mattstudios.utils:matts-framework:1.0.2"
        implementation "me.mattstudios.utils:matt-framework-gui:1.0.1-BETA"
        implementation "me.mattstudios.utils:matt-core:1.0.34"

        // Config repository
        implementation "ch.jalu:configme:1.1.0"

        // Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava {
        options.compilerArgs += ["-parameters"]
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        kotlinOptions.javaParameters = true
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    minimize()

    relocate("me.mattstudios.mf", "me.mattstudios.triumphtowns.mf")
    relocate("me.mattstudios.mattcore", "me.mattstudios.triumphtowns.core")
    relocate("ch.jalu.configme", "me.mattstudios.triumphtowns.configme")

    archiveFileName = "TriumphTowns-${project.version}.jar"

    // Testing only
    destinationDir file("T:/servers/spigot-1.15/plugins");
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}